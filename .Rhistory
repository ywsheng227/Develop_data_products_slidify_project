qpois(.95, lambda)
mdl2 <- glm(visits~date, offset=log(visits+1),family="poisson", data=hits)
mdl2 <- glm(simplystats~date, offset=log(visits+1),family="poisson", data=hits)
qpois(.95, mdl2$fitted.values[704])
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
install.packages("dplyr")
library(swirl)
swirl()
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -x:size)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "US")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version)
)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
crans <- select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean_group=mean(size))
summarize(by_package, mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
install.packages("caret")
install.packages("MASS")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("gbm")
install.packages("mda")
install.packages("rpart")
install.packages("RWeka")
install.packages("caTools")
library(ISLR)
install.packages("ISLR")
library(ISLR)
library(ggplot2)
library(caret)
data(wage)
library(dataset)
library(datasets)
data(wage)
install.packages("datasets")
install.packages("datasets")
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <-Wage[inTrain,]
testing <-Wage[-inTrain,]
qplot(age, wage, data=training)
qplot(age, wage, color=jobclass,data=training)
library(Hmisc)
cutWage <-cut2(training$Wage, g=3)
table(cutWage)
qplot(age, wage, color=education,data=training, geom="density")
qplot(wage, color=education,data=training, geom="density")
library(kernlab)
data(spam)
inTrain <-createDataPartition(y=spam$type,p=0.75,list=FALSE)
training <-spam[inTrain,]
testing <-spam[-inTrain,]
hist(training$capitalAve)
summary(training)
head(training)
modelfit <- train(type ~., data=training, preProcess=c("center","scale"),method="glm")
install.packages("e1071")
modelfit <- train(type ~., data=training, preProcess=c("center","scale"),method="glm")
modelfit
table(training$jobclass)
head(training)
library(ISLR)
library(caret)
data(Wage)
inTrain <-createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training <-Wage[inTrain,]
testing <-Wage[-inTrain,]
dummies <- dummyVars(wage ~ jobclass, data=training)
head(predict(dummies,newdata=training))
lm1 <-lm(wage ~ bsBasis, data=training)
library(splines)
bsBasis <- bs(training$age, df=3)
lm1 <-lm(wage ~ bsBasis, data=training)
plot(training$age, training$wage,pch=19, cex=0.5)
points(training$age, predict(lm1,newdata=training), col="red", pch=19, cex=0.5)
predict(bsBasis, age=testing$age)
head(predict(bsBasis, age=testing$age))
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-trainIndex,]
training = adData[-testIndex,]
testing = adData[testIndex,]
dim(training)
dim(testing)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
inTrain
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
dim(training)
dim(testing)
head(concrete)
plot(Cement, CompressiveStrength, data=training, type="density")
plot(training$Cement, training$CompressiveStrength, data=training, type="density")
plot(training$Superplasticizer")
hist(training$Superplasticizer")
hist(training$Superplasticizer)
hist(log(training$Superplasticizer)+1)
hist(training$Superplasticizer)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
select <- grep("IL", training)
head(select)
select <- grep("IL", names(training)
)
select
training_sub <- training[, select]
head(training_sub)
training_sub <- training_sub[, -13]
head(training_sub)
?preProcess
preProcess(training_sub, method="pca", thresh=0.8)
training_sub1 <- cbind(training$diagnosis, training_sub)
head(training_sub1)
modelFit1 <- train(training$diagnosis ~., method="glm", data=training_sub1)
predict(modelFit1, testing)
names(training_sub1[,1]) <- c("diagnosis")
head(training_sub1)
training_sub1 <- cbind(training[,1], training_sub)
head(training_sub1)
names(training_sub1[,1]) <- "diagnosis"
head(training_sub1)
select1 <- grep("IL | diagnosis", training)
training_sub1 <- training[,select1]
head(training_sub1)
select1
select1 <- grep("IL | diagnosis", names(training))
training_sub1 <- training[,select1]
head(training_sub1)
select1
names(training)
select1 <- grep("IL", training)
select1
select1 <- grep("IL", names(training)
)
select1
select1 <- c(1, 58,59,60,61,62,63,64,65,66,67,68,69)
training_sub1 <- training[,select1]
head(training_sub1)
modelFit1 <- train(diagnosis ~., method="pca", data=training_sub1)
modelFit1 <- train(diagnosis ~., method="glm", data=training_sub1)
predict(modelFit1, testing)
confusingMatrix(testing$diagnosis, predict(modelFit1, testing))
confusionMatrix(testing$diagnosis, predict(modelFit1, testing))
head(training_sub)
preProc <- preProcess(training_sub, method="pca", thresh=0.8)
trainPC <- predict(preProc, training_sub)
head(trainPC)
modelFit2 <- train(diagnosis ~., method="glm", data=trainPC)
trainPC1 <- cbind(training$diagnosis, trainPC)
head(trainPC1)
colnames(trainPC1)[1] <- "diagnosis"
head(trainPC1)
modelFit2 <- train(diagnosis ~., method="glm", data=trainPC1)
confusionMatrix(testing$diagnosis, predict(modelFit2, testing))
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
featurePlot(x=training[,c("Cement", "BlastFurnaceSlag", "FlyAsh", "Water", "Superplasticizer", "CoarseAggregate", "FineAggregate", "Age", y=training$CompressiveStrength, plot="pairs")])
data(Wage)
head(Wage)
featurePlot(x=training[,c("FlyAsh", "Age", y=training$CompressiveStrength, plot="pairs")])
head(training)
featurePlot(x=training[,c("FlyAsh", "Age"), y=training$CompressiveStrength, plot="pairs")])
featurePlot(x=training[,c("FlyAsh", "Age")], y=training$CompressiveStrength, plot="pairs")])
training[,c("FlyAsh", "Age")]
x <- training[,c("FlyAsh", "Age")]
y <- training$CompressiveStrength
head(y)
featurePlot(x, y, plot="pairs")
hist(y)
featurePlot(x, y, plot="pairs")
head(training)
featurePlot(x=training[,c("Cement", "BlastFurnaceSlag", "FlyAsh", "Water", "Superplasticizer", "CoarseAggregate", "FineAggregate", "Age")], y=training$CompressiveStrength, plot="pairs")
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(training$Superplasticizer)
summary(training$Superplasticizer)
hist(log(training$Superplasticizer)+1)
featurePlot(x=training[,c("Cement", "BlastFurnaceSlag", "FlyAsh", "Water", "Superplasticizer", "CoarseAggregate", "FineAggregate", "Age")], y=training$CompressiveStrength, plot="pairs")
library(caret)
data(faithful)
inTrain <- createDataPartition(y=faithful$waiting, p=0.5,list=FALSE)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
head(trainFaith)
plot(waiting, eruptions, data=trainFaith)
lm1 <- lm(eruptions ~ waiting, data=trainFaith)
summary(lm1)
plot(trainFaith$waiting, trainFaith$eruptions)
lines(trainFaith$waiting, lm1$fitted)
modFit <- train(eruptions ~ waiting, data=trainFaith, method="lm")
summary(modFit$finalModel)
library(ISLR)
library(ggplot2)
data(Wage)
head(Wage)
modFit <- train(wage ~ age+jobclass+education, method="lm", data=Wage)
summary(modFit$finalModel)
finMod <- modFit$finalModel
print(finMod)
plot(finMod, 1, pch=19, cex=0.5, col="red")
plot(finMod, 1, pch=19, cex=0.5)
finMod
head(finMod$fitted)
head(finMod$residuals)
plot(finMod$residuals)
plot(finMod$residuals, pch=19)
library(ElemStatLearn)
data(prostate)
str(prostate)
install.packages("quantmod")
install.packages("Quandl")
install.packages("clue")
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(caret)
modFit1 <- train(y ~., method="rf", data=vowel.train)
names(vowel.test)
modFit2 <- train(y ~., method="gbm", data=vowel.train)
modFit2 <- train(y ~., method="gbm", data=vowel.train)
pred1 <- predict(modFit1, vowel.test)
pred2 <- predict(modFit2, vowel.test)
confusionMatrix(pred1, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)
predDF <- data.frame(pred1, pred2, y=vowel.test$y)
combModFit <- train(y~., method="gam", data=predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(combPred, vowel.test$y)
agreeSub <- vowel.test[pred1 == pred2,]
pred_comb <- predict(modFit1, agreeSub)
confusionMatrix(pred_comb, vowel.test$y)
confusionMatrix(pred_comb, agreeSub$y)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
names(testing)
set.seed(62433)
modFit1 <- train(diagnosis ~ ., method="rf", data=training)
modFit2 <- train(diagnosis ~ ., method="gbm", data=training)
modFit3 <- train(diagnosis ~ ., method="lda", data=training)
pred1 <- predict(modFit1, testing)
pred2 <- predict(modFit2, testing)
pred3 <- predict(modFit3, testing)
confusionMatrix(modFit1, testing$diagnosis)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
predDF <- data.frame(pred1, pred2, pred3, diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~., method="rf", data=predDF)
combPred <- predict(comModFit, predDF)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
?plot.enet
install.packages("glmmLasso")
library(glmmLasso)
install.packages("glmnet")
library(glmnet)
names(training)
table(training$Cement)
names(training)
modFit_concrete <- train(CompressiveStrength ~., method="glmnet", data=concrete)
modFit_concrete
modFit_concrete$finalModel
?glmnet
modFit_concrete <- train(CompressiveStrength ~., method="lasso", data=concrete)
modFit_concrete <- train(CompressiveStrength ~., method="lasso", data=concrete)
modFit_concrete$finalModel
dataURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
library(lubridate)
dat <- read.csv(url(dataURL))
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
library(forecast)
plot(tstrain)
fcast <- forecast(tstrain)
fcast1 <- bats(tstrain)
plot(fcast1)
fcast1$finalModel
fcast1
pred <- forecast(fcast1)
confusionMatrix(pred, testing)
confusionMatrix(pred, testing$visitsTumblr)
pred <- predict(fcast1, testing)
confusionMatrix(pred, testing$visitsTumblr)
model <- bats(tstrain)
pred <- forecast(model)
confusionMatrix(pred, testing$visitsTumblr)
pred
accuracy(pred, testing$visitsTumblr)
confusionMatrix(pred, testing$visitsTumblr)
sum(testing$visitsTumblr <= pred$upper) / nrow(testing)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- svm(CompressiveStrength ~., data=concrete)
library(e1071)
modFit <- svm(CompressiveStrength ~., data=concrete)
pred <- predict(modFit, testing)
accuracy(pred, testing$CompressiveStrength)
install.packages("shiny")
library(shiny)
require(rCharts)
library(rCharts)
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group='Eye',
type='multiBarChart',
data=subset(haireye, Sex=='Male'))
n1$save('fig/n1.html', cdn=TRUE)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
print(M, 'chart')
M
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
print(Line, 'chart')
rstudio::viewer(Line)
demo(googleVis)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='yuewei',
token='8B4D07CD0009D01D0D5483B241096F76',
secret='<SECRET>')
shinyapps::setAccountInfo(name='yuewei',
token='8B4D07CD0009D01D0D5483B241096F76',
secret='<SECRET>')
shinyapps::setAccountInfo(name='yuewei', token='8B4D07CD0009D01D0D5483B241096F76', secret='hc6RSvNvR+Y8Y2LqExiWE51XoBGDA8WGDypIbo1f')
shinyapps::setAccountInfo(name='yuewei', token='8B4D07CD0009D01D0D5483B241096F76', secret='hc6RSvNvR+Y8Y2LqExiWE51XoBGDA8WGDypIbo1f')
install_github('ropensci/plotly')
install_github('ropensci/plotly')
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
getwd()
setwd("C:/Users/Yuewei/Documents/R/data")
getwd()
setwd("C:/Users/Yuewei/Documents/R/data/Develop_data_products")
getwd()
library(slidify)
author("course_project")
slidify("index.Rmd")
browseURL("index.html")
head(cars)
help(cars)
head(faithful)
help(faithful)
lm <- lm(eruptions ~ waiting, data=faithful)
lm
plot(faithful$waiting, faithful$eruptions)
table(faithful$waiting)
table(is.na(faithful$waiting))
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
low_wt <- faithful[, faithful$waiting < 67]
low_wt <- faithful[faithful$waiting < 67,]
head(low_wt)
high_wt -> faithful[faithful$waiting >= 67,]
high_wt <- faithful[faithful$waiting >= 67,]
low_wt_lm <- lm(eruptions, waiting, data=low_wt)
high_wt_lm <- lm(eruptions, waiting, data=high_wt)
head(high_wt)
low_wt_lm <- lm(eruptions ~ waiting, data=low_wt)
high_wt_lm <- lm(eruptions ~ waiting, data=high_wt)
low_wt_lm <- lm(eruptions ~ waiting, data=low_wt)
high_wt_lm <- lm(eruptions ~ waiting, data=high_wt)
plot(faithful$waiting, faithful$eruptions,
main="The Relationship between Eruption and Waiting Time",
xlab="Waiting Time (min)",
ylab="Duration of Eruption (min)")
lines(low_wt_lm, col="red")
low_wt_lm
names(low_wt_lm)
low_wt_lm$coefficients
low_wt_lm$fitted.values
lines(low_wt$waiting, low_wt_lm$fitted.values, col="red")
lines(high_wt$waiting, high_wt_lm$fitted.values, col="blue")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish_github(ywsheng227, Develop_data_products_slidify_project)
publish_github("ywsheng227", "Develop_data_products_slidify_project")
publish(user="ywsheng227", repo="Develop_data_products_slidify_project")
publish(ywsheng227, Develop_data_products_slidify_project)
